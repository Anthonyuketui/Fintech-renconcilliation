name: FinTech Reconciliation - CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  AWS_REGION: us-east-1
  APP_NAME: fintech-reconciliation

jobs:
  security-scan:
    name: Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: SAST Security Scan
      run: |
        pip install semgrep
        semgrep --config=auto --severity=ERROR --error src/
    
    - name: Generate SBOM
      run: |
        pip install -r requirements.txt
        pip install cyclonedx-bom
        cyclonedx-py requirements -o sbom.json
    
    - name: Infrastructure Security Scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'vuln,secret,misconfig'
        severity: 'CRITICAL'
        exit-code: '1'
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-report
        path: sbom.json
        retention-days: 90

  test:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: fintech
          POSTGRES_DB: fintech_reconciliation
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
    
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
      target-env: ${{ steps.check.outputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run test suite
      env:
        DB_HOST: localhost
        DB_PASSWORD: test
        DB_USER: fintech
        DB_NAME: fintech_reconciliation
        DB_PORT: 5432
      run: |
        sleep 5
        PYTHONPATH=src pytest tests/ -v --cov=src
    
    - name: Performance test
      env:
        DB_HOST: localhost
        DB_PASSWORD: test
        DB_USER: fintech
        DB_NAME: fintech_reconciliation
        DB_PORT: 5432
      run: |
        PYTHONPATH=src python scripts/performance-test.py
    
    - name: Determine deployment
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENV="dev"
        else
          ENV="none"
        fi
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "deploy=$([[ $ENV != "none" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: needs.test.outputs.should-deploy == 'true'
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:${{ github.sha }} .
        ECR_URL=$(aws ecr describe-repositories --repository-names fintech-reconciliation-${{ needs.test.outputs.target-env }} --query 'repositories[0].repositoryUri' --output text)
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_URL
        docker tag ${{ env.APP_NAME }}:${{ github.sha }} $ECR_URL:${{ github.sha }}
        docker push $ECR_URL:${{ github.sha }}
    
    - name: Container Security Scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'image'
        image-ref: '${{ env.APP_NAME }}:${{ github.sha }}'
        scanners: 'vuln,secret,misconfig'
        severity: 'CRITICAL'
        exit-code: '1'
        trivyignores: '.trivyignore'

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: needs.test.outputs.should-deploy == 'true'
    timeout-minutes: 15
    environment: ${{ needs.test.outputs.target-env }}
    
    outputs:
      deployed-env: ${{ needs.test.outputs.target-env }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    

    
    - name: Deploy infrastructure
      env:
        TF_VAR_db_password: ${{ needs.test.outputs.target-env == 'prod' && secrets.DB_PASSWORD_PROD || secrets.DB_PASSWORD_DEV }}
        TF_VAR_operations_email: ${{ secrets.OPERATIONS_EMAIL }}
        TF_VAR_sender_email: ${{ secrets.OPERATIONS_EMAIL }}
      run: |
        chmod +x scripts/deploy-terraform.sh
        ./scripts/deploy-terraform.sh ${{ needs.test.outputs.target-env }} ${{ secrets.TERRAFORM_STATE_BUCKET }} ${{ env.AWS_REGION }}
    


  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [deploy]
    timeout-minutes: 8
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Run integration test
      run: |
        chmod +x scripts/test-integration.sh
        ./scripts/test-integration.sh