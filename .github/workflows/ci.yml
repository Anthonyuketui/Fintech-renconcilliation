name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: fintech
          POSTGRES_PASSWORD: fintech
          POSTGRES_DB: fintech_reconciliation
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html safety bandit flake8 pylint
      
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U fintech; do
            echo "Waiting for postgres..."
            sleep 2
          done
      
      - name: Initialize Database
        env:
          PGPASSWORD: fintech
        run: |
          psql -h localhost -U fintech -d fintech_reconciliation -f setup.sql
      
      - name: Verify Database Schema
        env:
          PGPASSWORD: fintech
        run: |
          psql -h localhost -U fintech -d fintech_reconciliation -c \
            "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"
      
      - name: Create Report Directory
        run: mkdir -p Sample_Output
      
      - name: Run Tests with Coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: fintech_reconciliation
          DB_USER: fintech
          DB_PASSWORD: fintech
          PROCESSOR_API_BASE_URL: https://dummyjson.com
          INTERNAL_API_BASE_URL: https://jsonplaceholder.typicode.com
          REPORT_OUTPUT_DIR: Sample_Output
          AWS_S3_BUCKET_NAME: fintech-reconciliation-reports
          AWS_REGION: us-east-1
          SMTP_SERVER: smtp.gmail.com
          SMTP_PORT: 587
        run: |
          PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH pytest tests/ \
            -v \
            --cov=src/data_fetcher \
            --cov=src/reconciliation_engine \
            --cov=src/report_generator \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=70 \
            --html=pytest-report.html \
            --self-contained-html
      
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            .coverage
            pytest-report.html
          retention-days: 30
      
      - name: Upload Sample Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sample-outputs
          path: Sample_Output/
          retention-days: 30

  security:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install security tools
        run: |
          pip install safety bandit
      
      - name: Check Dependencies for Vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check --json || true
        continue-on-error: true
      
      - name: Run Bandit Security Scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -ll
        continue-on-error: true
      
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: bandit-report.json
          retention-days: 30

  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install linting tools
        run: |
          pip install flake8 pylint black isort
      
      - name: Check Code Formatting
        run: |
          black --check src/ tests/ || echo "Run 'black src/ tests/' to fix formatting"
        continue-on-error: true
      
      - name: Check Import Sorting
        run: |
          isort --check-only src/ tests/ || echo "Run 'isort src/ tests/' to fix imports"
        continue-on-error: true
      
      - name: Run flake8
        run: |
          flake8 src/ tests/ --max-line-length=120 --exclude=__pycache__,*.pyc --count --statistics
      
      - name: Run pylint
        run: |
          pip install -r requirements.txt
          pylint src/ --max-line-length=120 --disable=C0111,R0913,R0902,W0703,C0103 --fail-under=7.0
        continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker Image
        run: |
          docker build -t fintech-reconciliation:${{ github.sha }} -t fintech-reconciliation:latest .
      
      - name: Test Docker Image
        run: |
          docker run --rm fintech-reconciliation:latest python -c "import src.main; print('Import successful')"
      
      - name: Save Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save fintech-reconciliation:latest | gzip > fintech-reconciliation.tar.gz
      
      - name: Upload Docker Image
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: fintech-reconciliation.tar.gz
          retention-days: 7
          compression-level: 0
  
  deploy-check:
    runs-on: ubuntu-latest
    needs: [test, security, lint, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deployment Readiness Check
        run: |
          echo "âœ… All tests passed"
          echo "âœ… Security scans completed"
          echo "âœ… Code quality checks passed"
          echo "âœ… Docker image built successfully"
          echo ""
          echo "ðŸ“¦ Deployment artifacts ready:"
          echo "  - Docker image: fintech-reconciliation:${{ github.sha }}"
          echo "  - Coverage reports available in artifacts"
          echo "  - Sample outputs available in artifacts"
          echo ""
          echo "ðŸš€ Ready for manual deployment or CD trigger"
          echo "Note: AWS S3 integration is optional - using local storage fallback"
  
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, lint, docker, deploy-check]
    if: always()
    
    steps:
      - name: Check Pipeline Status
        id: status
        run: |
          if [ "${{ needs.test.result }}" == "failure" ] || \
             [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.docker.result }}" == "failure" ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Pipeline failed - Critical issues detected" >> $GITHUB_OUTPUT
          elif [ "${{ needs.security.result }}" == "failure" ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=Security scan warnings - Review required" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Pipeline completed successfully" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Notification
        run: |
          echo "======================================"
          echo "ðŸ“§ NOTIFICATION TO OPERATIONS TEAM"
          echo "======================================"
          echo "Status: ${{ steps.status.outputs.status }}"
          echo "Message: ${{ steps.status.outputs.message }}"
          echo "Build: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "Test Results: ${{ needs.test.result }}"
          echo "Security Scan: ${{ needs.security.result }}"
          echo "Code Quality: ${{ needs.lint.result }}"
          echo "Docker Build: ${{ needs.docker.result }}"
          echo ""
          echo "ðŸ“Š View full results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "======================================"
      
      - name: Create Deployment Summary
        run: |
          cat << EOF > deployment-summary.md
          # Deployment Summary
          
          **Build:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Status
          - âœ… Tests: Passed (70%+ coverage on core modules)
          - âœ… Security: Scanned
          - âœ… Linting: Passed
          - âœ… Docker: Built
          
          ## Artifacts
          - Docker Image: \`fintech-reconciliation:${{ github.sha }}\`
          - Coverage Reports: Available in GitHub Actions artifacts
          - Sample Outputs: Available in GitHub Actions artifacts
          
          ## Deployment Options
          1. **Local/Staging**: Load Docker image and run with environment variables
          2. **Cloud Platform**: Deploy container to AWS ECS, GCP Cloud Run, or Azure Container Instances
          3. **Manual**: Use docker-compose with provided configuration
          
          ## Notes
          - AWS S3 integration uses local storage fallback when credentials not provided
          - All environment variables must be configured before deployment
          - Database schema initialized via setup.sql
          EOF
      
      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 90