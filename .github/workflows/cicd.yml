name: FinTech Reconciliation - CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  AWS_REGION: us-east-1
  APP_NAME: fintech-reconciliation

jobs:
  security-scan:
    name: Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Semgrep Security Scan
      run: |
        pip install semgrep
        semgrep --config=auto --severity=ERROR --error src/
    
    - name: Generate SBOM
      run: |
        pip install -r requirements.txt
        pip install cyclonedx-bom
        cyclonedx-py requirements -o sbom.json
    
    - name: Trivy Security Scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'vuln,secret,misconfig'
        severity: 'CRITICAL'
        exit-code: '1'
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: sbom.json
        retention-days: 90

  test:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: fintech
          POSTGRES_DB: fintech_reconciliation
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
    
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
      target-env: ${{ steps.check.outputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run test suite
      env:
        DB_HOST: localhost
        DB_PASSWORD: test
        DB_USER: fintech
        DB_NAME: fintech_reconciliation
        DB_PORT: 5432
      run: |
        sleep 5
        PYTHONPATH=src pytest tests/ -v --cov=src
    
    - name: Performance test
      env:
        DB_HOST: localhost
        DB_PASSWORD: test
        DB_USER: fintech
        DB_NAME: fintech_reconciliation
        DB_PORT: 5432
      run: |
        PYTHONPATH=src python -c "
        import time
        from src.reconciliation_engine import ReconciliationEngine
        from src.models import Transaction
        from datetime import datetime, date
        from decimal import Decimal
        
        # Generate test data
        processor_txns = [Transaction(
            transaction_id=f'txn_{i}',
            processor_name='stripe',
            amount=Decimal('100.0'),
            currency='USD',
            status='completed',
            merchant_id='test_merchant',
            transaction_date=datetime(2025, 1, 1),
            reference_number=f'ref_{i}',
            fee=Decimal('2.9')
        ) for i in range(10000)]
        internal_txns = processor_txns[:-500]  # 500 missing
        
        # Performance test
        start_time = time.time()
        engine = ReconciliationEngine()
        result = engine.reconcile(processor_txns, internal_txns, date(2025, 1, 1), 'stripe')
        duration = time.time() - start_time
        
        print(f'Processed 10,000 transactions in {duration:.2f} seconds')
        assert duration < 30, f'Performance test failed: {duration:.2f}s > 30s'
        assert result.summary.missing_transactions_count == 500, f'Expected 500 missing, got {result.summary.missing_transactions_count}'
        print('Performance test passed')
        "
    
    - name: Determine deployment
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENV="dev"
        else
          ENV="none"
        fi
        
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        
        if [[ "$ENV" != "none" ]]; then
          echo "deploy=true" >> $GITHUB_OUTPUT
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
        fi

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: needs.test.outputs.should-deploy == 'true'
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:${{ github.sha }} .
        docker save ${{ env.APP_NAME }}:${{ github.sha }} > image.tar
    
    - name: Container security scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'image'
        image-ref: '${{ env.APP_NAME }}:${{ github.sha }}'
        scanners: 'vuln,secret,misconfig'
        severity: 'CRITICAL'
        exit-code: '1'
        trivyignores: '.trivyignore'
    
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar
        retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: needs.test.outputs.should-deploy == 'true'
    timeout-minutes: 15
    environment: ${{ needs.test.outputs.target-env }}
    
    outputs:
      deployed-env: ${{ needs.test.outputs.target-env }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Validate secrets
      env:
        TARGET_ENV: ${{ needs.test.outputs.target-env }}
      run: |
        if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" || -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" || -z "${{ secrets.TERRAFORM_STATE_BUCKET }}" || -z "${{ secrets.OPERATIONS_EMAIL }}" ]]; then
          echo "ERROR: Missing required secrets"
          exit 1
        fi
        
        if [[ "$TARGET_ENV" == "prod" && -z "${{ secrets.DB_PASSWORD_PROD }}" ]]; then
          echo "ERROR: DB_PASSWORD_PROD not configured"
          exit 1
        elif [[ "$TARGET_ENV" == "dev" && -z "${{ secrets.DB_PASSWORD_DEV }}" ]]; then
          echo "ERROR: DB_PASSWORD_DEV not configured"
          exit 1
        fi
    
    - name: Deploy infrastructure
      working-directory: terraform/environments/${{ needs.test.outputs.target-env }}
      env:
        TARGET_ENV: ${{ needs.test.outputs.target-env }}
        TF_VAR_db_password: ${{ needs.test.outputs.target-env == 'prod' && secrets.DB_PASSWORD_PROD || secrets.DB_PASSWORD_DEV }}
        TF_VAR_operations_email: ${{ secrets.OPERATIONS_EMAIL }}
        TF_VAR_sender_email: ${{ secrets.OPERATIONS_EMAIL }}
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
            key    = "$TARGET_ENV/terraform.tfstate"
            region = "${{ env.AWS_REGION }}"
          }
        }
        EOF
        
        terraform init -reconfigure
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
    
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Deploy application
      run: |
        docker load < image.tar
        ECR_URL=$(cd terraform/environments/${{ needs.test.outputs.target-env }} && terraform output -raw ecr_repository_url)
        
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_URL
        
        docker tag ${{ env.APP_NAME }}:${{ github.sha }} $ECR_URL:${{ github.sha }}
        docker push $ECR_URL:${{ github.sha }}
        
        echo "Deployed: $ECR_URL:${{ github.sha }}"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [deploy]
    timeout-minutes: 8
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Run integration test
      env:
        TARGET_ENV: ${{ needs.deploy.outputs.deployed-env }}
      run: |
        APP="${{ env.APP_NAME }}-${{ needs.deploy.outputs.deployed-env }}"
        
        # Get network configuration
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=$APP-vpc" --query 'Vpcs[0].VpcId' --output text)
        SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=*public*" --query 'Subnets[0].SubnetId' --output text)
        SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=$APP-ecs-sg" --query 'SecurityGroups[0].GroupId' --output text)
        
        # Run reconciliation task
        TASK_ARN=$(aws ecs run-task \
          --cluster $APP \
          --task-definition $APP \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
          --overrides '{"containerOverrides":[{"name":"'$APP'","command":["python","src/main.py","--processors","stripe","--date","'$(date +%Y-%m-%d)'"]}]}' \
          --query 'tasks[0].taskArn' --output text)
        
        # Wait and check result
        aws ecs wait tasks-stopped --cluster $APP --tasks $TASK_ARN
        EXIT_CODE=$(aws ecs describe-tasks --cluster $APP --tasks $TASK_ARN --query 'tasks[0].containers[0].exitCode' --output text)
        
        if [ "$EXIT_CODE" = "0" ]; then
          echo "✅ Integration test passed"
        else
          echo "❌ Integration test failed with exit code: $EXIT_CODE"
          exit 1
        fi