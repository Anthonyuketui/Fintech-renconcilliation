name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: fintech
          POSTGRES_PASSWORD: fintech
          POSTGRES_DB: fintech_reconciliation
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html
      
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U fintech; do
            echo "Waiting for postgres..."
            sleep 2
          done
      
      - name: Initialize Database
        env:
          PGPASSWORD: fintech
        run: psql -h localhost -U fintech -d fintech_reconciliation -f setup.sql
      
      - name: Run Tests with Coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: fintech_reconciliation
          DB_USER: fintech
          DB_PASSWORD: fintech
          PROCESSOR_API_BASE_URL: https://dummyjson.com
          INTERNAL_API_BASE_URL: https://jsonplaceholder.typicode.com
          REPORT_OUTPUT_DIR: Sample_Output
        run: |
         mkdir -p Sample_Output
         export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
         pytest tests/ \
          -v \
          --cov=src.data_fetcher \
          --cov=src.reconciliation_engine \
          --cov=src.report_generator \
          --cov-report=term-missing \
          --cov-report=html \
          --cov-fail-under=70 \
          --html=pytest-report.html \
          --self-contained-html
      
      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            htmlcov/
            .coverage
            pytest-report.html
            Sample_Output/
          retention-days: 30

  security:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install security tools
        run: pip install safety bandit
      
      - name: Check Dependencies for Vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check || true
      
      - name: Run Bandit Security Scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -ll || true
      
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: bandit-report.json
          retention-days: 30

  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install linting tools
        run: pip install flake8 pylint black isort
      
      - name: Run Code Style Checks
        run: |
          black --check src/ tests/ || true
          isort --check-only src/ tests/ || true
          flake8 src/ tests/ --max-line-length=120 || true
          pylint src/ --max-line-length=120 --disable=C0111,R0913,R0902,W0703,C0103 || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      
      - name: Build Docker Image
        run: docker build -t fintech-reconciliation:${{ github.sha }} -t fintech-reconciliation:latest .
      
      - name: Test Docker Image
        run: docker run --rm fintech-reconciliation:latest python -c "import src.main; print('âœ… Import successful')"
      
      - name: Save & Upload Docker Image
        if: github.ref == 'refs/heads/main'
        run: docker save fintech-reconciliation:latest | gzip > fintech-reconciliation.tar.gz
      
      - uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: docker-image
          path: fintech-reconciliation.tar.gz
          retention-days: 7

  deploy-check:
    runs-on: ubuntu-latest
    needs: [test, security, lint, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - run: |
          echo "âœ… Tests passed"
          echo "âœ… Security scanned"
          echo "âœ… Lint completed"
          echo "âœ… Docker image built"
          echo "ðŸš€ Ready for deployment"

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, lint, docker, deploy-check]
    if: always()
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "======================================"
          echo "ðŸ“§ NOTIFICATION TO OPERATIONS TEAM"
          echo "======================================"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Docker: ${{ needs.docker.result }}"
          echo "Deployment Check: ${{ needs.deploy-check.result }}"
          echo "======================================"
