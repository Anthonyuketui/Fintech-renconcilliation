name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: fintech
          POSTGRES_PASSWORD: fintech
          POSTGRES_DB: fintech_reconciliation
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U fintech; do
            echo "Waiting for postgres..."
            sleep 2
          done
      
      - name: Initialize Database
        env:
          PGPASSWORD: fintech
        run: |
          psql -h localhost -U fintech -d fintech_reconciliation -f setup.sql
      
      - name: Verify Database Schema
        env:
          PGPASSWORD: fintech
        run: |
          psql -h localhost -U fintech -d fintech_reconciliation -c \
            "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"
      
      - name: Create Report Directory
        run: mkdir -p Sample_Output
      
      - name: Run Tests with Coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: fintech_reconciliation
          DB_USER: fintech
          DB_PASSWORD: fintech
          PROCESSOR_API_BASE_URL: https://dummyjson.com
          INTERNAL_API_BASE_URL: https://jsonplaceholder.typicode.com
          REPORT_OUTPUT_DIR: Sample_Output
        run: |
          # Add src to Python path and run tests
          PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH pytest tests/ -v --cov=src --cov-report=term-missing
      
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: .coverage

  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install linting tools
        run: |
          pip install flake8 pylint
      
      - name: Run flake8
        run: |
          flake8 src/ --max-line-length=120 --exclude=__pycache__,*.pyc --count --show-source --statistics
        continue-on-error: true
      
      - name: Run pylint
        run: |
          pylint src/ --max-line-length=120 --disable=C0111,R0913,R0902
        continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker Image
        run: |
          docker build -t fintech-reconciliation:latest .
      
      - name: Test Docker Image
        run: |
          docker run --rm fintech-reconciliation:latest python -c "import src.main; print('Import successful')"
      
      - name: Save Docker Image
        run: |
          docker save fintech-reconciliation:latest | gzip > fintech-reconciliation.tar.gz
      
      - name: Upload Docker Image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: fintech-reconciliation.tar.gz